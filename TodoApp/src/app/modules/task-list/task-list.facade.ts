import { Injectable } from "@angular/core";
import { TaskApi } from './api/task.api';
import { TaskListState } from './state/taks-list.state';
import { Observable } from 'rxjs';
import { Task } from './models/task.model';

@Injectable()
export class TaskListFacade {

    constructor(private taskApi: TaskApi, private taskListState: TaskListState){}

    public isUpdating$(): Observable<boolean> {
        return this.taskListState.isUpdating$();
    }

    public getTasks$(): Observable<Task[]> {
        // here we just pass the state without any projections
        // it may happen that it is necessary to combine two or more streams and expose to the components
        return this.taskListState.getTasks$();
    }

    public loadTasks(): Observable<Task[]> {
        const tasks$ = this.taskApi.getTasks();
        tasks$.subscribe(
            (tasks$: Task[]) => {
                this.taskListState.setTasks(tasks$);
            }
        );
        return tasks$;
    }

    // optimistic update
    // 1. update UI state
    // 2. call API
    public addTask(task: Task): void {
        this.taskListState.addTask(task);
        this.taskApi.createTask(task)
            .subscribe(
                (addedTaskWithId: Task) => {
                    // success callback - we have id generated by the server, let's update the state
                    this.taskListState.updateTaskId(task, addedTaskWithId);
                },
                (error: any) => {
                    // error callback - we need to rollback the state change
                    this.taskListState.removeTask(task);
                    console.log(error);
                }
            );
    }

    // pessimistic update
    // 1. call API
    // 2. update UI state
    public updateTask(task: Task): void {
        this.taskListState.setUpdating(true);
        this.taskApi.updateTask(task)
            .subscribe(
                () => this.taskListState.updateTask(task),
                (error) => console.log(error),
                () => this.taskListState.setUpdating(false)
            );
    }

}